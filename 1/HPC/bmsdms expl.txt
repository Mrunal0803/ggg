These lines include the necessary header files for input/output (iostream), dynamic arrays (vector), sorting (algorithm), and OpenMP directives (omp.h). The using namespace std; statement is used to avoid having to write std:: before standard library functions.

cpp
Copy code
void parallel_bubble_sort(vector<int>& arr, int n) {
    int i, j, temp;
    bool swapped;

    for (i = 0; i < n - 1; i++) {
        swapped = false;

        // Parallelize the inner loop using OpenMP
        #pragma omp parallel for private(j, temp) shared(swapped, arr)
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                swapped = true;
            }
        }

        // If no elements were swapped, the array is already sorted
        if (swapped == false) {
            break;
        }
    }
}
This function implements the parallel version of bubble sort. It takes a vector arr and its size n as input.

The outer loop iterates n-1 times, representing the number of passes required to sort the array. Inside the outer loop,
 a boolean variable swapped is used to check if any elements were swapped during the inner loop.

The inner loop is parallelized using the #pragma omp parallel for directive. The private variables j and temp are declared
 inside the loop to ensure thread safety. The loop iterates from 0 to n-i-1, comparing adjacent elements and swapping them if necessary.

If no elements were swapped during the inner loop, it means the array is already sorted, and the loop is terminated early using the break statement.

cpp
Copy code
void merge(vector<int>& arr, int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    vector<int> L(n1), R(n2);

    // Copy data to temporary arrays
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the two arrays back into arr
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
This function performs the merge step in the merge sort algorithm. It takes the vector arr and the indices l, m, and r as input, 
representing the left, middle, and right boundaries of the subarray to be merged.

The function first determines the sizes of the two subarrays to be merged, n1 and n2, based on the indices.

Temporary arrays L and R are created to store the elements of the two subarrays.

The elements of the original array arr are then copied to the temporary arrays L and R using two separate loops.

Next, the function merges the elements from L and R back into the original array arr. It compares the elements from the two 
arrays and places them in the correct order in arr using three indices i, j, and k.

The remaining elements from either L or R are then copied to arr if there are any remaining elements.

cpp
Copy code
void sequential_merge_sort(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        // Recursively sort the two halves
        sequential_merge_sort(arr, l, m);
        sequential_merge_sort(arr, m + 1, r);

        // Merge the sorted halves
        merge(arr, l, m, r);
    }
}
This function implements the sequential version of merge sort. It takes the vector arr and the indices l and r as input, 
representing the left and right boundaries of the subarray to be sorted.

The function first checks if l is less than r, indicating that there is more than one element in the subarray. 
If there is only one element or less, the subarray is considered sorted.

If there are more than one element, the function calculates the middle index m to divide the subarray into two halves.

The function then recursively calls itself to sort the two halves: from l to m and from m+1 to r.

Finally, the function calls the merge function to merge the sorted halves.

cpp
Copy code
void parallel_merge_sort(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        // Parallelize the sorting of two halves using OpenMP sections
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                parallel_merge_sort(arr, l, m);
            }

            #pragma omp section
            {
                parallel_merge_sort(arr, m + 1, r);
            }
        }

        // Merge the sorted halves
        merge(arr, l, m, r);
    }
}
This function implements the parallel version of merge sort. It takes the vector arr and the indices l and r as input,
representing the left and right boundaries of the subarray to be sorted.

The function follows a similar structure as the sequential merge sort. The difference lies in the use of OpenMP sections 
to parallelize the sorting of the two halves.

The #pragma omp parallel sections directive is used to divide the work among multiple threads. The two sections inside the 
parallel region are marked with #pragma omp section directives, indicating that they can be executed in parallel.

Each section calls the parallel_merge_sort function recursively to sort the corresponding half of the array.

Finally, the function calls the merge function to merge the sorted halves.

cpp
Copy code
int main() {
    vector<int> arr = { 4, 1, 6, 2, 0, 7, 3, 8, 5 };
    int n = arr.size();
    double start_time, end_time;

    // Sequential Bubble Sort
    start_time = omp_get_wtime();
    sort(arr.begin(), arr.end());
    end_time = omp_get_wtime();
    cout << "Sorted array using sequential sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl << "Time taken by sequential bubble sort: " << end_time - start_time << " seconds" << endl;

    // Parallel Bubble Sort
    arr = { 4, 1, 6, 2, 0, 7, 3, 8, 5 };
    start_time = omp_get_wtime();
    parallel_bubble_sort(arr, n);
    end_time = omp_get_wtime();
    cout << "Sorted array using parallel bubble sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl << "Time taken by parallel bubble sort: " << end_time - start_time << " seconds" << endl;

    // Sequential Merge Sort
    arr = { 4, 1, 6, 2, 0, 7, 3, 8, 5 };
    start_time = omp_get_wtime();
    sequential_merge_sort(arr, 0, n - 1);
    end_time = omp_get_wtime();
    cout << "Sorted array using sequential merge sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl << "Time taken by sequential merge sort: " << end_time - start_time << " seconds" << endl;

    // Parallel Merge Sort
    arr = { 4, 1, 6, 2, 0, 7, 3, 8, 5 };
    start_time = omp_get_wtime();
    parallel_merge_sort(arr, 0, n - 1);
    end_time = omp_get_wtime();
    cout << "Sorted array using parallel merge sort: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl << "Time taken by parallel merge sort: " << end_time - start_time << " seconds" << endl;

    return 0;
}
The main function demonstrates the usage of the sorting algorithms. It initializes a vector arr with a set of numbers and obtains its size n.

The function then measures the execution time of each sorting algorithm and outputs the sorted array and the time taken for each algorithm.

First, the sequential version of bubble sort is executed using the sort function from the <algorithm> library.

Then, the parallel version of bubble sort is executed using the parallel_bubble_sort function.

Next, the sequential version of merge sort is executed using the sequential_merge_sort function.

Finally, the parallel version of merge sort is executed using the parallel_merge_sort function.

The sorted arrays and the execution times for each algorithm are printed to the console.

Overall, the code provides a comparison between the sequential and parallel implementations of bubble sort and merge sort using OpenMP.